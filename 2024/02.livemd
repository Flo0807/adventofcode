# Advent of Code 2024 - Day 02

```elixir
Mix.install([
  {:req, "~> 0.5"},
  {:benchee, "~> 1.3"}
])
```

## Section

```elixir
opts = [headers: [{"cookie", "session=#{System.fetch_env!("LB_AOC_SESSION")}"}]]
puzzle_input = Req.get!("https://adventofcode.com/2024/day/2/input", opts).body
```

```elixir
reports =
  puzzle_input
  |> String.split("\n", trim: true)
  |> Enum.map(fn row ->
    row
    |> String.split()
    |> Enum.map(&String.to_integer/1)
  end)
```

## Functions

```elixir
valid_sequence? = fn sequence ->
  [head | tail] = sequence
  
  desc? = Enum.reduce_while(tail, head, fn el, acc ->
    if el < acc and (acc - el <= 3) , do: {:cont, el}, else: {:halt, false}
  end)

  asc? = Enum.reduce_while(tail, head, fn el, acc ->
    if el > acc and (el - acc <= 3), do: {:cont, el}, else: {:halt, false}
  end)

  desc? || asc?
end
```

## Puzzle 1

```elixir
puzzle_1 = fn ->
  Enum.count(reports, &valid_sequence?.(&1))
end

puzzle_1.()
```

## Puzzle 2

```elixir
puzzle_2 = fn ->
  Enum.count(reports, fn report ->
    valid_with_deletion? = 
      Enum.with_index(report)
      |> Enum.map(fn {_el, i} ->
        List.delete_at(report, i) |> valid_sequence?.()
      end)
      |> Enum.any?()
  
    valid_with_deletion? or valid_sequence?.(report)
  end)
end

puzzle_2.()
```

## Benchmarks

```elixir
Benchee.run(
  %{
    "puzzle_1" => fn -> puzzle_1.() end,
    "puzzle_2" => fn -> puzzle_2.() end
  })
```

| Name     | ips    | average  | deviation | median   | 99th %   |
| -------- | ------ | -------- | --------- | -------- | -------- |
| puzzle_1 | 179.64 | 5.57 ms  | ±14.80%  | 5.31 ms  | 7.78 ms  |
| puzzle_2 | 17.26  | 57.95 ms | ±5.31%   | 56.95 ms | 74.57 ms |

<!-- livebook:{"offset":1704,"stamp":{"token":"XCP.gxjWsNMdz3QFxz-bLvgTP03wMymrnM7nDBy8ztx7QlGu311M4rOGHwMiHYWEsBsRsLFz5nbFlygVjAhCnfIuO1mQ8NVbv3IblP-ryiG0fVs_qIL6woM","version":2}} -->
